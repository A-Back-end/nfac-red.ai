#!/bin/bash

# Red.AI Development Startup Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è

set -e

echo "üöÄ Starting Red.AI Development Environment..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker first."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
if [ ! -f .env ]; then
    echo "üìã Creating .env file from template..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Please edit .env file with your configuration before continuing."
    echo "   Required: OPENAI_API_KEY, SECRET_KEY, DATABASE_URL"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ Creating directories..."
mkdir -p uploads logs static

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üõë Stopping existing containers..."
docker-compose down

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üèóÔ∏è  Building and starting services..."
docker-compose up -d postgres redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ Waiting for database to be ready..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üîç Checking database connection..."
docker-compose exec postgres pg_isready -U ${POSTGRES_USER:-redai_user} -d ${POSTGRES_DB:-redai}

# –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
echo "üîÑ Running database migrations..."
docker-compose exec -T postgres psql -U ${POSTGRES_USER:-redai_user} -d ${POSTGRES_DB:-redai} -c "SELECT 1;"

# –ó–∞–ø—É—Å–∫ backend –≤ development —Ä–µ–∂–∏–º–µ
echo "üîß Starting backend in development mode..."
cd src/backend

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -d "venv" ]; then
    echo "üêç Creating Python virtual environment..."
    python3 -m venv venv
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ Installing Python dependencies..."
pip install -r ../../requirements/dev.txt

# –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞
echo "üöÄ Starting FastAPI server..."
uvicorn main:app --host 0.0.0.0 --port 8000 --reload &
BACKEND_PID=$!

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd ../../

# –ó–∞–ø—É—Å–∫ frontend –≤ development —Ä–µ–∂–∏–º–µ
echo "üé® Starting frontend in development mode..."
cd src/frontend

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ ! -d "node_modules" ]; then
    echo "üì¶ Installing Node.js dependencies..."
    npm install
fi

# –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞
echo "üöÄ Starting Next.js server..."
npm run dev &
FRONTEND_PID=$!

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd ../../

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è graceful shutdown
cleanup() {
    echo "üõë Shutting down services..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    docker-compose down
    exit 0
}

# –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap cleanup SIGINT SIGTERM

echo "‚úÖ Red.AI Development Environment is running!"
echo ""
echo "üåê Services:"
echo "   Frontend: http://localhost:3000"
echo "   Backend:  http://localhost:8000"
echo "   API Docs: http://localhost:8000/docs"
echo "   Database: localhost:5432"
echo "   Redis:    localhost:6379"
echo ""
echo "üìä Monitoring:"
echo "   Prometheus: http://localhost:9090"
echo "   Grafana:    http://localhost:3001"
echo ""
echo "üí° Tips:"
echo "   - Edit .env file for configuration"
echo "   - Use Ctrl+C to stop all services"
echo "   - Check logs: docker-compose logs -f"
echo ""
echo "üîÑ Press Ctrl+C to stop all services..."

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
wait 