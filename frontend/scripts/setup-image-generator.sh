#!/bin/bash

# üé® RED AI Image Generator - Setup Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${PURPLE}========================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}========================================${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${BLUE}‚ñ∂${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
check_file() {
    if [ -f "$1" ]; then
        print_success "–§–∞–π–ª $1 –Ω–∞–π–¥–µ–Ω"
        return 0
    else
        print_warning "–§–∞–π–ª $1 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if command -v node >/dev/null 2>&1; then
        NODE_VERSION=$(node --version)
        print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_VERSION"
    else
        print_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm/yarn
    if command -v npm >/dev/null 2>&1; then
        NPM_VERSION=$(npm --version)
        print_success "npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NPM_VERSION"
    else
        print_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Next.js –ø—Ä–æ–µ–∫—Ç–∞
    if [ -f "package.json" ]; then
        print_success "Next.js –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω"
    else
        print_error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
check_api_keys() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"
    
    if [ -f ".env" ]; then
        print_success ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI API –∫–ª—é—á–∞
        if grep -q "OPENAI_API_KEY=" .env; then
            OPENAI_KEY=$(grep "OPENAI_API_KEY=" .env | cut -d '=' -f2 | tr -d '"')
            if [ -n "$OPENAI_KEY" ] && [ "$OPENAI_KEY" != "your_openai_key_here" ]; then
                print_success "OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            else
                print_error "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env${NC}"
                exit 1
            fi
        else
            print_error "OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            exit 1
        fi
    else
        print_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo -e "${YELLOW}–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example${NC}"
        
        if [ -f ".env.example" ]; then
            echo -e "${CYAN}–ö–æ–ø–∏—Ä—É—é .env.example –≤ .env...${NC}"
            cp .env.example .env
            print_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
            print_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ"
            exit 1
        else
            print_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
check_api_endpoints() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ endpoints
    check_file "app/api/dalle-generator/route.ts"
    check_file "app/api/generate-design/route.ts"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ImageGenerator –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    check_file "components/dashboard/ImageGenerator.tsx"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if [ ! -d "public/generated-images" ]; then
        mkdir -p public/generated-images
        print_success "–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ public/generated-images/"
    else
        print_success "–ü–∞–ø–∫–∞ public/generated-images/ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chmod 755 public/generated-images
    print_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    print_success "npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è openai –ø–∞–∫–µ—Ç–∞
    if npm list openai >/dev/null 2>&1; then
        print_success "–ü–∞–∫–µ—Ç openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ openai..."
        npm install openai
        print_success "–ü–∞–∫–µ—Ç openai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    print_header "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API endpoints"
    
    if [ -f "test-dalle-endpoints.js" ]; then
        print_status "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞..."
        echo -e "${YELLOW}–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000 –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ${NC}"
        echo -e "${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ Ctrl+C —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã${NC}"
        read
        
        node test-dalle-endpoints.js
    else
        print_warning "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç test-dalle-endpoints.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
show_instructions() {
    print_header "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É"
    
    echo -e "${GREEN}üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}\n"
    
    echo -e "${CYAN}–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:${NC}"
    echo -e "  ${YELLOW}npm run dev${NC}        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo -e "  ${YELLOW}npm run build${NC}      # –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
    echo -e "  ${YELLOW}npm run start${NC}      # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –≤–µ—Ä—Å–∏–∏"
    
    echo -e "\n${CYAN}–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:${NC}"
    echo -e "  ${YELLOW}node test-dalle-endpoints.js${NC}  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints"
    
    echo -e "\n${CYAN}–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${NC}"
    echo -e "  ${BLUE}Dashboard:${NC} http://localhost:3000/dashboard"
    echo -e "  ${BLUE}Image Generator:${NC} http://localhost:3000/image-generator"
    echo -e "  ${BLUE}API Docs:${NC} README_IMAGE_GENERATOR.md"
    
    echo -e "\n${CYAN}–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"
    echo -e "  ${YELLOW}app/api/dalle-generator/${NC}     # –ü—Ä–æ—Å—Ç–æ–π DALL-E endpoint"
    echo -e "  ${YELLOW}app/api/generate-design/${NC}     # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π endpoint"
    echo -e "  ${YELLOW}components/dashboard/ImageGenerator.tsx${NC}  # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
    echo -e "  ${YELLOW}public/generated-images/${NC}     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    echo -e "\n${CYAN}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ç—Ä–∞—Ç:${NC}"
    echo -e "  ${YELLOW}Standard quality:${NC} ~$0.040 –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    echo -e "  ${YELLOW}HD quality:${NC} ~$0.080 –∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    echo -e "  ${BLUE}–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ OpenAI Dashboard${NC}"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${PURPLE}"
    echo "  ____  _____ ____     _    ___   ___                            "
    echo " |  _ \| ____|  _ \   / \  |_ _| |_ _|_ __ ___   __ _  __ _  ___  "
    echo " | |_) |  _| | | | | / _ \  | |   | || '_ \` _ \ / _\` |/ _\` |/ _ \ "
    echo " |  _ <| |___| |_| |/ ___ \ | |   | || | | | | | (_| | (_| |  __/ "
    echo " |_| \_\_____|____/_/   \_\___| |___|_| |_| |_|\__,_|\__, |\___| "
    echo "                                                    |___/        "
    echo " ____                           _             "
    echo "|  _ \ _   _ _ __  _ __   ___ _ __| |_ ___ _ __  "
    echo "| |_) | | | | '_ \| '_ \ / _ \ '__| __/ _ \ '__| "
    echo "|  _ <| |_| | | | | | | |  __/ |  | ||  __/ |    "
    echo "|_| \_\\\\__, |_| |_|_| |_|\___|_|   \__\___|_|    "
    echo "       |___/                                      "
    echo -e "${NC}"
    
    print_header "RED AI Image Generator - DALL-E 3 Setup"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    check_dependencies
    check_api_keys
    check_api_endpoints
    create_directories
    install_dependencies
    
    show_instructions
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    echo -e "\n${CYAN}–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã API endpoints? (y/n)${NC}"
    read -r answer
    if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
        run_tests
    fi
    
    echo -e "\n${GREEN}üöÄ RED AI Image Generator –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "test")
        run_tests
        ;;
    "deps")
        check_dependencies
        install_dependencies
        ;;
    "dirs")
        create_directories
        ;;
    *)
        main
        ;;
esac 