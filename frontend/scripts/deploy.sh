#!/bin/bash

# Red.AI Production Deployment Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ production

set -e

echo "üöÄ Starting Red.AI Production Deployment..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ "$NODE_ENV" != "production" ]; then
    echo "‚ö†Ô∏è  Warning: NODE_ENV is not set to 'production'"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REQUIRED_VARS=(
    "SECRET_KEY"
    "DATABASE_URL"
    "OPENAI_API_KEY"
    "DOMAIN"
)

for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå Required environment variable $var is not set"
        exit 1
    fi
done

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
echo "üíæ Creating backup..."
./scripts/backup.sh

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üõë Stopping existing containers..."
docker-compose -f docker-compose.prod.yml down

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
echo "üì• Pulling latest code..."
git pull origin main

# –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo "üèóÔ∏è  Building production images..."
docker-compose -f docker-compose.prod.yml build --no-cache

# –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üîÑ Running database migrations..."
docker-compose -f docker-compose.prod.yml run --rm backend python -m alembic upgrade head

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üöÄ Starting production services..."
docker-compose -f docker-compose.prod.yml up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç Checking service health..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
if [ "$BACKEND_STATUS" != "200" ]; then
    echo "‚ùå Backend health check failed (HTTP $BACKEND_STATUS)"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
if [ "$FRONTEND_STATUS" != "200" ]; then
    echo "‚ùå Frontend health check failed (HTTP $FRONTEND_STATUS)"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_STATUS=$(docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready -q)
if [ $? -ne 0 ]; then
    echo "‚ùå Database health check failed"
    exit 1
fi

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo "üßπ Cleaning up old images..."
docker image prune -f

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
echo "‚úÖ Deployment completed successfully!"
echo ""
echo "üåê Services:"
echo "   Frontend: https://$DOMAIN"
echo "   API:      https://$DOMAIN/api"
echo "   Status:   https://$DOMAIN/health"
echo ""
echo "üìä Monitoring:"
echo "   Prometheus: https://$DOMAIN:9090"
echo "   Grafana:    https://$DOMAIN:3001"
echo ""

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Discord (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
if [ -n "$DEPLOY_WEBHOOK_URL" ]; then
    echo "üì¢ Sending deployment notification..."
    curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"‚úÖ Red.AI deployed successfully to production\nCommit: $(git rev-parse --short HEAD)\nTime: $(date)\"}" \
        "$DEPLOY_WEBHOOK_URL"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
if [ "$SSL_ENABLED" = "true" ]; then
    echo "üîí Checking SSL certificate..."
    openssl s_client -connect $DOMAIN:443 -servername $DOMAIN < /dev/null 2>/dev/null | openssl x509 -noout -dates
fi

echo "üéâ Red.AI is now running in production!"
echo "üìù Don't forget to:"
echo "   - Monitor logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Check metrics in Grafana"
echo "   - Test all major features"
echo "   - Update DNS records if needed" 