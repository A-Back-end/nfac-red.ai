"""
AI Service for RED AI
Handles AI interactions for floor plan analysis, design generation, and chat
"""

import os
import json
import base64
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime

# Import Azure OpenAI service
from azure_openai_service import create_azure_openai_service

class AIService:
    """AI Service for interior design assistance"""
    
    def __init__(self, api_key: Optional[str] = None, use_azure_ad: bool = None):
        """Initialize AI Service with Azure OpenAI"""
        # Initialize new Azure OpenAI service
        self.azure_service = create_azure_openai_service(use_azure_ad=use_azure_ad)
        
        # Legacy configuration for backward compatibility
        self.azure_api_key = api_key or os.getenv("AZURE_OPENAI_API_KEY") or "YOUR_AZURE_OPENAI_API_KEY_HERE"
        
        # Show service info
        service_info = self.azure_service.get_service_info()
        print(f"‚úÖ Azure OpenAI Service initialized")
        print(f"   Endpoint: {service_info['endpoint']}")
        print(f"   Authentication: {'Azure AD' if service_info['use_azure_ad'] else 'API Key'}")
        print(f"   API Version: {service_info['api_version']}")
        print(f"   DALL-E Model: {service_info['dalle_deployment']}")

    async def analyze_floor_plan(self, image_data: bytes, filename: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            # Prompt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏
            prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –≤–µ—Ä–Ω–∏ JSON —Å:
            1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
            2. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            3. –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å —Ç–∏–ø–æ–º –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –ø–ª–æ—â–∞–¥—å—é
            4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏
            5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {
                "rooms_detected": —á–∏—Å–ª–æ,
                "total_area": —á–∏—Å–ª–æ,
                "rooms": [{"type": "—Ç–∏–ø", "area": —á–∏—Å–ª–æ, "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"}],
                "suggestions": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"],
                "renovation_ideas": ["–∏–¥–µ—è1", "–∏–¥–µ—è2"],
                "estimated_cost": {"min": —á–∏—Å–ª–æ, "max": —á–∏—Å–ª–æ}
            }
            """
            
            # Use new Azure OpenAI service
            response = await self._analyze_with_new_service(prompt, image_base64)
                
            return response
            
        except Exception as e:
            print(f"AI Analysis error: {e}")
            return self._mock_analysis()

    async def _analyze_with_new_service(self, prompt: str, image_base64: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ Azure OpenAI —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            result = await self.azure_service.analyze_image(image_base64, prompt)
            
            if result["success"]:
                # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    return json.loads(result["analysis"])
                except:
                    # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –∞–Ω–∞–ª–∏–∑
                    print("üìù Response is not JSON, using mock analysis")
                    return self._mock_analysis()
            else:
                print(f"‚ùå Analysis failed: {result['error']}")
                return self._mock_analysis()
                
        except Exception as e:
            print(f"‚ùå New service error: {e}")
            return self._mock_analysis()

    async def generate_design_suggestions(self, room_type: str, style: str, budget: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        prompt = f"""
        –°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {room_type} –≤ —Å—Ç–∏–ª–µ {style} —Å –±—é–¥–∂–µ—Ç–æ–º {budget} —Ä—É–±–ª–µ–π.
        
        –í–µ—Ä–Ω–∏ JSON —Å:
        - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–µ–±–µ–ª—å 
        - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–¥–µ–ª–∫–∏
        - –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–º–µ—Ç–∞
        - 3D –∏–¥–µ–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        –§–æ—Ä–º–∞—Ç:
        {{
            "color_scheme": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2", "—Ü–≤–µ—Ç3"],
            "furniture": [{{"item": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "price": —á–∏—Å–ª–æ, "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"}}],
            "materials": [{{"type": "—Ç–∏–ø", "price_per_sqm": —á–∏—Å–ª–æ, "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"}}],
            "total_estimate": —á–∏—Å–ª–æ,
            "layout_ideas": ["–∏–¥–µ—è1", "–∏–¥–µ—è2"]
        }}
        """
        
        try:
            result = await self.azure_service.chat_completion([
                {"role": "user", "content": prompt}
            ], max_tokens=10000)
            
            if result["success"]:
                try:
                    return json.loads(result["content"])
                except:
                    print("üìù Response is not JSON, using mock suggestions")
                    return self._mock_design_suggestions()
            else:
                print(f"‚ùå Design suggestions failed: {result['error']}")
                return self._mock_design_suggestions()
        except Exception as e:
            print(f"Design suggestions error: {e}")
            return self._mock_design_suggestions()

    def chat_completion(self, message: str, context: Optional[Dict] = None, conversation_id: Optional[str] = None) -> str:
        """Chat completion method for backward compatibility (sync version)"""
        try:
            # Run async method in sync context
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            response = loop.run_until_complete(self.chat_with_ai(message, context))
            loop.close()
            return response
        except Exception as e:
            print(f"Chat completion error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    async def chat_with_ai(self, message: str, context: Optional[Dict] = None) -> str:
        """–ß–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º –ø–æ –¥–∏–∑–∞–π–Ω—É"""
        system_prompt = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. 
        –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ:
        - –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä
        - –î–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞  
        - –í—ã–±–æ—Ä–µ –º–µ–±–µ–ª–∏
        - –†–µ–º–æ–Ω—Ç–µ –∏ –æ—Ç–¥–µ–ª–∫–µ
        - –†–∞—Å—á–µ—Ç–µ –±—é–¥–∂–µ—Ç–∞
        
        –û—Ç–≤–µ—á–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω–æ, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.
        """
        
        try:
            messages = [{"role": "system", "content": system_prompt}]
            
            if context:
                messages.append({
                    "role": "user", 
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False)}"
                })
            
            messages.append({"role": "user", "content": message})
            
            result = await self.azure_service.chat_completion(messages, max_tokens=1000)
            
            if result["success"]:
                return result["content"]
            else:
                print(f"‚ùå Chat AI failed: {result['error']}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            print(f"Chat AI error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _mock_analysis(self) -> Dict:
        """–ú–æ–∫ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ–º–æ"""
        return {
            "rooms_detected": 3,
            "total_area": 75.5,
            "rooms": [
                {"type": "–≥–æ—Å—Ç–∏–Ω–∞—è", "area": 25.0, "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏"},
                {"type": "—Å–ø–∞–ª—å–Ω—è", "area": 18.5, "description": "–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è —Å –º–µ—Å—Ç–æ–º –¥–ª—è –≥–∞—Ä–¥–µ—Ä–æ–±–∞"},
                {"type": "–∫—É—Ö–Ω—è", "area": 12.0, "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫—É—Ö–Ω—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"},
                {"type": "–≤–∞–Ω–Ω–∞—è", "area": 6.0, "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"},
                {"type": "–ø—Ä–∏—Ö–æ–∂–∞—è", "area": 8.0, "description": "–í—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ —Å –º–µ—Å—Ç–æ–º –¥–ª—è –æ–±—É–≤–∏"},
                {"type": "–±–∞–ª–∫–æ–Ω", "area": 6.0, "description": "–ó–∞—Å—Ç–µ–∫–ª–µ–Ω–Ω—ã–π –±–∞–ª–∫–æ–Ω"}
            ],
            "suggestions": [
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫—É—Ö–Ω–∏ —Å –≥–æ—Å—Ç–∏–Ω–æ–π –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫—É –≤ —Å–ø–∞–ª—å–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ—Ç–ª—ã–µ —Ç–æ–Ω–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à–∫–∞—Ñ—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"
            ],
            "renovation_ideas": [
                "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–µ–Ω—ã –º–µ–∂–¥—É –∫—É—Ö–Ω–µ–π –∏ –≥–æ—Å—Ç–∏–Ω–æ–π",
                "–°–æ–∑–¥–∞–Ω–∏–µ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–æ–π –≤ —Å–ø–∞–ª—å–Ω–µ",
                "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∞–Ω–Ω–æ–π —Å —Ç—É–∞–ª–µ—Ç–æ–º",
                "–£—Ç–µ–ø–ª–µ–Ω–∏–µ –∏ –æ—Å—Ç–µ–∫–ª–µ–Ω–∏–µ –±–∞–ª–∫–æ–Ω–∞"
            ],
            "estimated_cost": {"min": 800000, "max": 1500000}
        }

    def _mock_design_suggestions(self) -> Dict:
        """–ú–æ–∫ –¥–∏–∑–∞–π–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        return {
            "color_scheme": ["#F5F5F5", "#667EEA", "#764BA2"],
            "furniture": [
                {"item": "–î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π", "price": 85000, "description": "–£–¥–æ–±–Ω—ã–π –¥–∏–≤–∞–Ω –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ"},
                {"item": "–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–∏–∫", "price": 25000, "description": "–°—Ç–µ–∫–ª—è–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –Ω–æ–∂–∫–∞–º–∏"},
                {"item": "–°—Ç–µ–ª–ª–∞–∂", "price": 35000, "description": "–ú–æ–¥—É–ª—å–Ω—ã–π —Å—Ç–µ–ª–ª–∞–∂ –¥–ª—è –∫–Ω–∏–≥ –∏ –¥–µ–∫–æ—Ä–∞"}
            ],
            "materials": [
                {"type": "–õ–∞–º–∏–Ω–∞—Ç", "price_per_sqm": 2500, "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ"},
                {"type": "–ö—Ä–∞—Å–∫–∞", "price_per_sqm": 350, "description": "–≠–∫–æ–ª–æ–≥–∏—á–Ω–∞—è –∫—Ä–∞—Å–∫–∞ –¥–ª—è —Å—Ç–µ–Ω"},
                {"type": "–ü–ª–∏—Ç–∫–∞", "price_per_sqm": 1800, "description": "–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –ø–ª–∏—Ç–∫–∞ –¥–ª—è –≤–∞–Ω–Ω–æ–π"}
            ],
            "total_estimate": 450000,
            "layout_ideas": [
                "–†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –¥–∏–≤–∞–Ω —É –æ–∫–Ω–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è",
                "–°–æ–∑–¥–∞–π—Ç–µ –∑–æ–Ω—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —É–≥–ª—É –∫–æ–º–Ω–∞—Ç—ã",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–µ—Ä–∫–∞–ª–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            ]
        }

    def _mock_chat_response(self, message: str) -> str:
        """–ú–æ–∫ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–µ–º–æ"""
        responses = {
            "–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞": "–î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —É—á–µ—Å—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã.",
            "–º–µ–±–µ–ª—å": "–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ–±–µ–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã –∏ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.",
            "—Ü–≤–µ—Ç–∞": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 60-30-10 –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ.",
            "–±—é–¥–∂–µ—Ç": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç —Å –∑–∞–ø–∞—Å–æ–º 20-30% –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.",
            "–æ—Å–≤–µ—â–µ–Ω–∏–µ": "–°–æ—á–µ—Ç–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –æ—Å–≤–µ—â–µ–Ω–∏—è: –æ–±—â–µ–µ, —Ä–∞–±–æ—á–µ–µ –∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ."
        }
        
        message_lower = message.lower()
        for key, response in responses.items():
            if key in message_lower:
                return response
        
        return "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."

# Utility functions for external use
async def analyze_room_image(image_data: bytes, filename: str) -> Dict:
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    service = AIService()
    return await service.analyze_floor_plan(image_data, filename)

async def generate_interior_design(room_type: str, style: str, budget: int = 100000) -> Dict:
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"""
    service = AIService()
    return await service.generate_design_suggestions(room_type, style, budget)

async def chat_interior_assistant(message: str, context: Optional[Dict] = None) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π —á–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    service = AIService()
    return await service.chat_with_ai(message, context)

# Example usage
if __name__ == "__main__":
    print("ü§ñ RED AI Service - Interior Design Assistant")
    print("=" * 50)
    
    # Test the service
    service = AIService()
    
    # Example: Mock analysis
    print("\nüìä Mock Floor Plan Analysis:")
    analysis = service._mock_analysis()
    print(f"Rooms detected: {analysis['rooms_detected']}")
    print(f"Total area: {analysis['total_area']} sq.m")
    
    # Example: Mock design suggestions
    print("\nüé® Mock Design Suggestions:")
    suggestions = service._mock_design_suggestions()
    print(f"Color scheme: {suggestions['color_scheme']}")
    print(f"Total estimate: {suggestions['total_estimate']:,} RUB")
    
    print("\n‚úÖ AI Service initialized successfully!")
    print("üí° Ready to assist with interior design projects") 