import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

// Fallback to standard OpenAI API if Azure fails
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Starting room analysis with Azure OpenAI...')
    
    const body = await request.json()
    const { image, userPrompt, analysisType = 'comprehensive' } = body
    
    if (!image) {
      return NextResponse.json(
        { error: 'Image is required for analysis' },
        { status: 400 }
      )
    }

    // Extract base64 part if it's a data URL
    const base64Image = image.includes(',') ? image.split(',')[1] : image
    
    // Create comprehensive analysis prompt for GPT-4o Vision
    const analysisPrompt = userPrompt || `
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—É/–∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

    –í–ï–†–ù–ò –û–¢–í–ï–¢ –°–¢–†–û–ì–û –í JSON –§–û–†–ú–ê–¢–ï:
    {
      "roomType": "—Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)",
      "condition": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç–ª–∏—á–Ω–æ–µ/—Ö–æ—Ä–æ—à–µ–µ/—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ/—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞)",
      "currentStyle": "—Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞",
      "lighting": "—Ç–∏–ø –æ—Å–≤–µ—â–µ–Ω–∏—è (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ/—Å–º–µ—à–∞–Ω–Ω–æ–µ)",
      "colors": ["–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç", "–∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç"],
      "materials": ["–º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", "–Ω–∞–ø–æ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", "–ø–æ—Ç–æ–ª–æ–∫"],
      "dimensions": {
        "estimatedArea": "20-25"
      },
      "recommendations": [
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1 –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞",
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2 –ø–æ –æ—Å–≤–µ—â–µ–Ω–∏—é", 
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3 –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–º—É —Ä–µ—à–µ–Ω–∏—é",
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 4 –ø–æ –º–µ–±–µ–ª–∏ –∏ –¥–µ–∫–æ—Ä—É",
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 5 –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–µ",
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 6 –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –æ—Ç–¥–µ–ª–∫–∏"
      ],
      "estimatedCost": {
        "cosmetic": 250000,
        "major": 800000
      },
      "fullAnalysis": "–ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:\n\n**–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n- –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è\n- –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞\n- –ê–Ω–∞–ª–∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è\n- –û—Ü–µ–Ω–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π\n\n**–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:**\n- –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n- –û—Ü–µ–Ω–∫–∞ –º–µ–±–µ–ª–∏ –∏ –µ—ë —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è\n- –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –∏ —Å—Ç–∏–ª—å\n- –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n**–ü–†–û–ë–õ–ï–ú–´ –ò –ù–ï–î–û–°–¢–ê–¢–ö–ò:**\n- –ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è\n- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n- –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã\n\n**–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n- –í–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è\n- –¶–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è\n- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–±–µ–ª–∏\n- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ—Ç–¥–µ–ª–∫–∏\n\n**–ë–Æ–î–ñ–ï–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:**\n- –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç: 200-300 —Ç—ã—Å. —Ä—É–±–ª–µ–π\n- –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: 600-1000 —Ç—ã—Å. —Ä—É–±–ª–µ–π"
    }

    –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ markdown!
    `

    console.log('üß† Sending image to GPT-4o Vision for analysis...')
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: analysisPrompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 1500,
      temperature: 0.7
    })

    const analysisResult = response.choices[0]?.message?.content || '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è'
    
    console.log('‚úÖ Room analysis completed successfully')
    console.log('üìä Raw analysis result:', analysisResult)

    // Parse JSON response from GPT-4o Vision
    let parsedAnalysis
    try {
      // Clean the response to extract valid JSON
      const jsonMatch = analysisResult.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonString = jsonMatch[0];
        parsedAnalysis = JSON.parse(jsonString);
        console.log('‚úÖ Successfully parsed JSON analysis');
      } else {
        throw new Error('No valid JSON found in response');
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse JSON, using fallback parser:', parseError);
      parsedAnalysis = parseAnalysisResponse(analysisResult);
    }

    const result = {
      success: true,
      analysis: {
        id: `analysis_${Date.now()}`,
        timestamp: new Date().toISOString(),
        originalImage: image,
        userPrompt,
        analysisType,
        ...parsedAnalysis,
        fullAnalysis: parsedAnalysis.fullAnalysis || analysisResult,
        confidence: parsedAnalysis.confidence || 85,
        metadata: {
          model: 'GPT-4o Vision',
          tokens: response.usage?.total_tokens || 0,
          cost: calculateCost(response.usage?.total_tokens || 0),
          processingTime: Date.now()
        }
      }
    }

    return NextResponse.json(result)

  } catch (error: any) {
    console.error('‚ùå Room analysis error:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Failed to analyze room',
        details: error.message 
      },
      { status: 500 }
    )
  }
}

function parseAnalysisResponse(analysis: string) {
  // Extract key information from the analysis text
  const roomTypes = ['–≥–æ—Å—Ç–∏–Ω–∞—è', '—Å–ø–∞–ª—å–Ω—è', '–∫—É—Ö–Ω—è', '–≤–∞–Ω–Ω–∞—è', '–æ—Ñ–∏—Å', '—Å—Ç–æ–ª–æ–≤–∞—è', '–ø—Ä–∏—Ö–æ–∂–∞—è']
  const styles = ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç—Å–∫–∏–π', '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π', '–ª–æ—Ñ—Ç', '–ø—Ä–æ–≤–∞–Ω—Å']
  const conditions = ['–æ—Ç–ª–∏—á–Ω–æ–µ', '—Ö–æ—Ä–æ—à–µ–µ', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ', '—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞']
  
  // Simple text analysis to extract structured data
  const lowerAnalysis = analysis.toLowerCase()
  
  const detectedRoomType = roomTypes.find(type => lowerAnalysis.includes(type)) || 'living_room'
  const detectedStyle = styles.find(style => lowerAnalysis.includes(style)) || '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π'
  const detectedCondition = conditions.find(condition => lowerAnalysis.includes(condition)) || '—Ö–æ—Ä–æ—à–µ–µ'
  
  // Extract recommendations (lines that start with "‚Ä¢", "-", or contain "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é")
  const recommendations = analysis
    .split('\n')
    .filter(line => 
      line.trim().startsWith('‚Ä¢') || 
      line.trim().startsWith('-') || 
      line.toLowerCase().includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') ||
      line.toLowerCase().includes('—Å—Ç–æ–∏—Ç')
    )
    .slice(0, 6)
    .map(line => line.replace(/^[‚Ä¢\-\s]+/, '').trim())
    .filter(line => line.length > 10)

  return {
    roomType: detectedRoomType.replace('–≥–æ—Å—Ç–∏–Ω–∞—è', 'living_room')
                              .replace('—Å–ø–∞–ª—å–Ω—è', 'bedroom')
                              .replace('–∫—É—Ö–Ω—è', 'kitchen')
                              .replace('–≤–∞–Ω–Ω–∞—è', 'bathroom')
                              .replace('–æ—Ñ–∏—Å', 'office')
                              .replace('—Å—Ç–æ–ª–æ–≤–∞—è', 'dining_room')
                              .replace('–ø—Ä–∏—Ö–æ–∂–∞—è', 'hallway'),
    currentStyle: detectedStyle,
    condition: detectedCondition,
    dimensions: {
      size: '—Å—Ä–µ–¥–Ω–∏–π', // Could be extracted with more sophisticated parsing
      height: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è',
      estimatedArea: '20-25'
    },
    lighting: lowerAnalysis.includes('—Ç–µ–º–Ω') ? 'artificial' : 
              lowerAnalysis.includes('—Å–≤–µ—Ç') || lowerAnalysis.includes('–æ–∫–Ω') ? 'natural' : 'mixed',
    colors: extractColors(analysis),
    furniture: extractFurniture(analysis),
    materials: extractMaterials(analysis),
    features: extractFeatures(analysis),
    recommendations: recommendations.length > 0 ? recommendations : [
      '–£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ',
      '–û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É',
      '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –º–µ–±–µ–ª–∏'
    ],
    suggestedStyle: getSuggestedStyles(detectedStyle),
    surfaces: {
      walls: '–æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã',
      flooring: '–ª–∞–º–∏–Ω–∞—Ç',
      ceiling: '–Ω–∞—Ç—è–∂–Ω–æ–π –ø–æ—Ç–æ–ª–æ–∫'
    },
    functionalAnalysis: {
      ergonomics: 'good',
      flow: 'good',
      storage: 'adequate'
    }
  }
}

function extractColors(analysis: string): string[] {
  const colorKeywords = ['–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π', '—Å–µ—Ä—ã–π', '–±–µ–∂–µ–≤—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π']
  const foundColors = colorKeywords.filter(color => analysis.toLowerCase().includes(color))
  return foundColors.length > 0 ? foundColors : ['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞', '—Å–≤–µ—Ç–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏']
}

function extractFurniture(analysis: string): string[] {
  const furnitureKeywords = ['–¥–∏–≤–∞–Ω', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '–ø–æ–ª–∫–∞', '—Ç—É–º–±–∞', '–∫—Ä–µ—Å–ª–æ']
  const foundFurniture = furnitureKeywords.filter(item => analysis.toLowerCase().includes(item))
  return foundFurniture.length > 0 ? foundFurniture : ['–±–∞–∑–æ–≤–∞—è –º–µ–±–µ–ª—å']
}

function extractMaterials(analysis: string): string[] {
  const materialKeywords = ['–¥–µ—Ä–µ–≤–æ', '–º–µ—Ç–∞–ª–ª', '—Å—Ç–µ–∫–ª–æ', '—Ç–∫–∞–Ω—å', '–∫–æ–∂–∞', '–ø–ª–∞—Å—Ç–∏–∫', '–∫–∞–º–µ–Ω—å', '–∫–µ—Ä–∞–º–∏–∫–∞']
  const foundMaterials = materialKeywords.filter(material => analysis.toLowerCase().includes(material))
  return foundMaterials.length > 0 ? foundMaterials : ['—Å–º–µ—à–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã']
}

function extractFeatures(analysis: string): string[] {
  const featureKeywords = ['–æ–∫–Ω–æ', '–±–∞–ª–∫–æ–Ω', '–Ω–∏—à–∞', '–∫–æ–ª–æ–Ω–Ω–∞', '–∞—Ä–∫–∞', '–∫–∞–º–∏–Ω', '–ª–µ—Å—Ç–Ω–∏—Ü–∞']
  const foundFeatures = featureKeywords.filter(feature => analysis.toLowerCase().includes(feature))
  return foundFeatures.length > 0 ? foundFeatures : ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞']
}

function getSuggestedStyles(currentStyle: string): string[] {
  const styleMap: { [key: string]: string[] } = {
    '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π': ['–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '—Ö–∞–π-—Ç–µ–∫', '–ª–æ—Ñ—Ç'],
    '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π': ['–Ω–µ–æ–∫–ª–∞—Å—Å–∏–∫–∞', '–ø—Ä–æ–≤–∞–Ω—Å', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'],
    '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç—Å–∫–∏–π': ['—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π', '—è–ø–æ–Ω—Å–∫–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π'],
    '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π': ['–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–ª–∞–≥–æ–º', '—Ö—é–≥–≥–µ'],
    '–ª–æ—Ñ—Ç': ['–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '—É—Ä–±–∞–Ω']
  }
  
  return styleMap[currentStyle] || ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç—Å–∫–∏–π', '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π']
}

function calculateCost(tokens: number): string {
  // Azure OpenAI GPT-4o pricing: ~$0.005 per 1K tokens
  const cost = (tokens / 1000) * 0.005
  return `$${cost.toFixed(4)}`
} 