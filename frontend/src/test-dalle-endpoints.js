#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π RED AI
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–≤–∞ endpoint: /api/dalle-generator –∏ /api/generate-design
 */

const API_BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testPrompts = [
  {
    prompt: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∞—è —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –º–µ–±–µ–ª—å—é, –±–æ–ª—å—à–∏–º–∏ –æ–∫–Ω–∞–º–∏ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º',
    style: 'modern',
    roomType: 'living',
    budgetLevel: 'medium'
  },
  {
    prompt: '–£—é—Ç–Ω–∞—è —Å–ø–∞–ª—å–Ω—è –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–π –∫—Ä–æ–≤–∞—Ç—å—é –∏ —Ç–µ–∫—Å—Ç–∏–ª–µ–º',
    style: 'scandinavian', 
    roomType: 'bedroom',
    budgetLevel: 'high'
  },
  {
    prompt: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫—É—Ö–Ω—è –≤ —Å—Ç–∏–ª–µ –ª–æ—Ñ—Ç —Å –∫–∏—Ä–ø–∏—á–Ω—ã–º–∏ —Å—Ç–µ–Ω–∞–º–∏ –∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
    style: 'industrial',
    roomType: 'kitchen',
    budgetLevel: 'low'
  }
];

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ DALL-E endpoint
 */
async function testDalleGenerator(testData) {
  console.log('\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/dalle-generator...');
  console.log('‚îÅ'.repeat(50));
  
  try {
    const startTime = Date.now();
    
    const response = await fetch(`${API_BASE_URL}/api/dalle-generator`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...testData,
        quality: 'standard',
        size: '1024x1024',
        dalleStyle: 'natural'
      })
    });

    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`);
    console.log(`üåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorData);
      return false;
    }

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!');
      console.log(`üñºÔ∏è  URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.imageUrl}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.metadata.estimatedCost}`);
      console.log(`üéØ –ú–æ–¥–µ–ª—å: ${result.metadata.model}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä: ${result.metadata.size}`);
      console.log(`üé® –ö–∞—á–µ—Å—Ç–≤–æ: ${result.metadata.quality}`);
      
      if (result.metadata.revisedPrompt) {
        console.log(`‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${result.metadata.revisedPrompt.substring(0, 100)}...`);
      }
      
      return true;
    } else {
      console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', result.error);
      return false;
    }

  } catch (error) {
    console.log('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ design endpoint
 */
async function testGenerateDesign(testData) {
  console.log('\nüèóÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/generate-design...');
  console.log('‚îÅ'.repeat(50));
  
  try {
    const startTime = Date.now();
    
    const response = await fetch(`${API_BASE_URL}/api/generate-design`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        ...testData,
        quality: 'standard',
        mode: 'generate',
        referenceImages: []
      })
    });

    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`);
    console.log(`üåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorData);
      return false;
    }

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!');
      console.log(`üñºÔ∏è  URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.imageUrl}`);
      console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.metadata.estimatedCost}`);
      console.log(`üéØ –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.metadata.generationMode}`);
      
      if (result.furniture && result.furniture.length > 0) {
        console.log(`ü™ë –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–µ–±–µ–ª—å: ${result.furniture.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
        result.furniture.slice(0, 3).forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.name} - ${item.price} (${item.category})`);
        });
      }
      
      if (result.pinterestStyles && result.pinterestStyles.length > 0) {
        console.log(`üìå Pinterest —Å—Ç–∏–ª–∏: ${result.pinterestStyles.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
        result.pinterestStyles.forEach((style, index) => {
          console.log(`   ${index + 1}. ${style.name} - ${style.description}`);
        });
      }
      
      return true;
    } else {
      console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', result.error);
      return false;
    }

  } catch (error) {
    console.log('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check
 */
async function testHealthCheck() {
  console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è DALL-E endpoint...');
  console.log('‚îÅ'.repeat(50));
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/dalle-generator`, {
      method: 'GET'
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ DALL-E endpoint –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`üìã –í–µ—Ä—Å–∏—è: ${result.version}`);
      console.log(`ü§ñ –ú–æ–¥–µ–ª–∏: ${result.models?.join(', ')}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä—ã: ${result.supportedSizes?.join(', ')}`);
      return true;
    } else {
      console.log('‚ùå DALL-E endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
  } catch (error) {
    console.log('üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üß™ RED AI Image Generator - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Endpoints');
  console.log('='.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
  const healthOk = await testHealthCheck();
  
  if (!healthOk) {
    console.log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    process.exit(1);
  }

  let successCount = 0;
  let totalTests = 0;

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ–±–æ–∏—Ö endpoints
  for (let i = 0; i < testPrompts.length; i++) {
    const testData = testPrompts[i];
    
    console.log(`\nüìù –¢–µ—Å—Ç ${i + 1}: ${testData.style} ${testData.roomType}`);
    console.log(`   –ü—Ä–æ–º–ø—Ç: "${testData.prompt.substring(0, 60)}..."`);
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ endpoint
    totalTests++;
    const dalleSuccess = await testDalleGenerator(testData);
    if (dalleSuccess) successCount++;
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ endpoint
    totalTests++;
    const designSuccess = await testGenerateDesign(testData);
    if (designSuccess) successCount++;
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (i < testPrompts.length - 1) {
      console.log('\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalTests}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successCount / totalTests) * 100)}%`);
  
  if (successCount === totalTests) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ RED AI Image Generator –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏');
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π');
  }

  console.log('\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
  console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ quality: "standard" –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏');
  console.log('   ‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
  console.log('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ public/generated-images/');
  console.log('   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ OpenAI API');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  testDalleGenerator,
  testGenerateDesign,
  testHealthCheck,
  runTests
}; 