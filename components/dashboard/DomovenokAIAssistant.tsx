'use client'

import React, { useState, useRef, useEffect } from 'react'
import { 
  MessageCircle, Send, User, Settings, Home, 
  Palette, TrendingUp, Loader2, Copy, ThumbsUp, ThumbsDown, X, Maximize2,
  Building, PaintBucket, Star, ChevronUp, ChevronDown, HelpCircle
} from 'lucide-react'
import { Button } from '../ui/button'
import { Textarea } from '../ui/textarea'
import { Badge } from '../ui/badge'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
}

interface DomovenokAIAssistantProps {
  userId: string
  onClose?: () => void
}

// –†–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
const ROLES = {
  realtor: { name: '–†–∏–µ–ª—Ç–æ—Ä', emoji: 'üè†', icon: Building, color: 'bg-blue-500' },
  interior_designer: { name: '–î–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞', emoji: 'üé®', icon: Palette, color: 'bg-purple-500' },
  renovation_expert: { name: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–º–æ–Ω—Ç—É', emoji: 'üî®', icon: PaintBucket, color: 'bg-orange-500' },
  investment_advisor: { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', emoji: 'üí∞', icon: TrendingUp, color: 'bg-green-500' },
  universal: { name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', emoji: 'üèÜ', icon: Star, color: 'bg-gradient-to-r from-purple-500 to-blue-500' }
}

// –°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è
const STYLES = {
  friendly: { name: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', emoji: 'üòä' },
  professional: { name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', emoji: 'üíº' },
  expert: { name: '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', emoji: 'üéì' },
  casual: { name: '–ü—Ä–æ—Å—Ç–æ–π', emoji: 'üëã' }
}

// –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
const QUICK_QUESTIONS = [
  {
    category: '–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    icon: Home,
    questions: [
      '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏?',
      '–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã?',
      '–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã?',
      '–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏?'
    ]
  },
  {
    category: '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞',
    icon: Palette,
    questions: [
      '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —É—é—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –≤ –º–∞–ª–µ–Ω—å–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ?',
      '–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Å–ø–∞–ª—å–Ω–∏?',
      '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–∏—é?',
      '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞'
    ]
  },
  {
    category: '–†–µ–º–æ–Ω—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    icon: PaintBucket,
    questions: [
      '–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç?',
      '–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã?',
      '–ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å?',
      '–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–ø—ã —Ä–µ–º–æ–Ω—Ç–∞?'
    ]
  },
  {
    category: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
    icon: TrendingUp,
    questions: [
      '–°—Ç–æ–∏—Ç –ª–∏ –ø–æ–∫—É–ø–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É?',
      '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?',
      '–ö–∞–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä?',
      '–†–∏—Å–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'
    ]
  }
]

export default function DomovenokAIAssistant({ userId, onClose }: DomovenokAIAssistantProps) {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const [showQuickQuestions, setShowQuickQuestions] = useState(false)
  const [selectedRole, setSelectedRole] = useState('universal')
  const [communicationStyle, setCommunicationStyle] = useState('friendly')
  const [isMaximized, setIsMaximized] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  useEffect(() => {
    if (messages.length === 0) {
      const welcomeMessage: Message = {
        id: '1',
        role: 'assistant',
        content: `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç **–î–æ–º–æ–≤—ë–Ω–æ–∫** üè†‚ú® 

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞! 

**–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:**
üè† **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏** - –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞, –æ—Ü–µ–Ω–∫–∞
üé® **–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞** - –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, —Å—Ç–∏–ª–∏, —Ü–≤–µ—Ç–∞, –º–µ–±–µ–ª—å  
üî® **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞** - –±—é–¥–∂–µ—Ç, —ç—Ç–∞–ø—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã
üí∞ **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã** - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üëá`,
        timestamp: new Date()
      }
      setMessages([welcomeMessage])
    }
  }, [])

  const sendMessage = async (messageText?: string) => {
    const messageToSend = messageText || inputMessage
    if (!messageToSend.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: messageToSend,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    try {
      const response = await fetch('/api/azure-ai-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: messageToSend,
          personality: communicationStyle,
          specialization: selectedRole === 'universal' ? 'consultant' : selectedRole,
          conversationHistory: messages.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          assistantName: '–î–æ–º–æ–≤—ë–Ω–æ–∫',
          context: 'real_estate_design_assistant'
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: data.message,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, aiMessage])
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —á–∞—Ç–∞:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**: ${error.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const clearChat = () => {
    setMessages([])
    setTimeout(() => {
      const welcomeMessage: Message = {
        id: '1',
        role: 'assistant',
        content: `–ß–∞—Ç –æ—á–∏—â–µ–Ω! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–Ω–æ–≤–∞ üè†‚ú®

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞!`,
        timestamp: new Date()
      }
      setMessages([welcomeMessage])
    }, 100)
  }

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content)
  }

  const currentRole = ROLES[selectedRole as keyof typeof ROLES]
  const currentStyle = STYLES[communicationStyle as keyof typeof STYLES]

  return (
    <div className={`h-full w-full ${isMaximized ? 'fixed inset-0 z-50' : ''}`}>
      <div className="h-full flex flex-col bg-white dark:bg-slate-900">
        {/* Header */}
        <div className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                <Home className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-slate-900 dark:text-white flex items-center space-x-2">
                  <span>–î–æ–º–æ–≤—ë–Ω–æ–∫</span>
                  <span className="text-2xl">üè†</span>
                </h1>
                <p className="text-sm text-slate-600 dark:text-slate-400">
                  {currentRole.name}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Badge className={`${currentRole.color} text-white border-0`}>
                <span className="mr-1">{currentRole.emoji}</span>
                {currentRole.name}
              </Badge>
              <Button
                onClick={() => setShowSettings(!showSettings)}
                variant="ghost"
                size="sm"
                className="text-slate-600 dark:text-slate-400"
              >
                <Settings className="h-4 w-4" />
              </Button>
              <Button
                onClick={() => setIsMaximized(!isMaximized)}
                variant="ghost"
                size="sm"
                className="text-slate-600 dark:text-slate-400"
              >
                <Maximize2 className="h-4 w-4" />
              </Button>
              {onClose && (
                <Button
                  onClick={onClose}
                  variant="ghost"
                  size="sm"
                  className="text-slate-600 dark:text-slate-400"
                >
                  <X className="h-4 w-4" />
                </Button>
              )}
            </div>
          </div>
        </div>

        {/* Settings Panel */}
        {showSettings && (
          <div className="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800 px-6 py-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3">
                  –†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                </label>
                <div className="space-y-2">
                  {Object.entries(ROLES).map(([key, role]) => {
                    const Icon = role.icon
                    return (
                      <button
                        key={key}
                        onClick={() => setSelectedRole(key)}
                        className={`w-full flex items-center space-x-3 p-3 rounded-lg transition-colors ${
                          selectedRole === key
                            ? 'bg-slate-100 dark:bg-slate-800 border-2 border-purple-500/50'
                            : 'bg-slate-50 dark:bg-slate-800/50 hover:bg-slate-100 dark:hover:bg-slate-800'
                        }`}
                      >
                        <Icon className="h-5 w-5 text-slate-600 dark:text-slate-400" />
                        <div className="flex-1 text-left">
                          <p className="font-medium text-slate-900 dark:text-white">
                            {role.emoji} {role.name}
                          </p>
                        </div>
                      </button>
                    )
                  })}
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-3">
                  –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
                </label>
                <div className="space-y-2">
                  {Object.entries(STYLES).map(([key, style]) => (
                    <button
                      key={key}
                      onClick={() => setCommunicationStyle(key)}
                      className={`w-full flex items-center space-x-3 p-3 rounded-lg transition-colors ${
                        communicationStyle === key
                          ? 'bg-slate-100 dark:bg-slate-800 border-2 border-purple-500/50'
                          : 'bg-slate-50 dark:bg-slate-800/50 hover:bg-slate-100 dark:hover:bg-slate-800'
                      }`}
                    >
                      <span className="text-xl">{style.emoji}</span>
                      <div className="flex-1 text-left">
                        <p className="font-medium text-slate-900 dark:text-white">
                          {style.name}
                        </p>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Messages Container */}
        <div className="flex-1 overflow-hidden">
          <div className="h-full overflow-y-auto p-6 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex items-start space-x-3 ${
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {message.role === 'assistant' && (
                  <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Home className="h-4 w-4 text-white" />
                  </div>
                )}
                
                <div className={`max-w-[80%] ${
                  message.role === 'user' ? 'order-first' : ''
                }`}>
                  <div className={`rounded-2xl px-4 py-3 ${
                    message.role === 'user'
                      ? 'bg-gradient-to-br from-purple-500 to-blue-600 text-white'
                      : 'bg-white dark:bg-slate-800 text-slate-900 dark:text-white shadow-sm border border-slate-200 dark:border-slate-700'
                  }`}>
                    <div className="prose prose-sm max-w-none">
                      <div className="whitespace-pre-wrap text-sm">
                        {message.content}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 mt-2">
                    <span className="text-xs text-slate-500 dark:text-slate-500">
                      {message.timestamp.toLocaleTimeString()}
                    </span>
                    {message.role === 'assistant' && (
                      <div className="flex items-center space-x-1">
                        <Button
                          onClick={() => copyMessage(message.content)}
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300"
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 text-slate-400 hover:text-green-500"
                        >
                          <ThumbsUp className="h-3 w-3" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0 text-slate-400 hover:text-red-500"
                        >
                          <ThumbsDown className="h-3 w-3" />
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
                
                {message.role === 'user' && (
                  <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-teal-600 rounded-lg flex items-center justify-center flex-shrink-0">
                    <User className="h-4 w-4 text-white" />
                  </div>
                )}
              </div>
            ))}
            
            {isLoading && (
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
                  <Home className="h-4 w-4 text-white" />
                </div>
                <div className="bg-white dark:bg-slate-800 rounded-2xl px-4 py-3 shadow-sm border border-slate-200 dark:border-slate-700">
                  <div className="flex items-center space-x-2">
                    <Loader2 className="h-4 w-4 animate-spin text-purple-500" />
                    <span className="text-sm text-slate-600 dark:text-slate-400">
                      –î–æ–º–æ–≤—ë–Ω–æ–∫ –¥—É–º–∞–µ—Ç...
                    </span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Quick Questions Panel */}
        {showQuickQuestions && (
          <div className="border-t border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 shadow-lg">
            <div className="px-6 py-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium text-slate-700 dark:text-slate-300 flex items-center space-x-2">
                  <HelpCircle className="h-4 w-4" />
                  <span>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</span>
                </h3>
                <Button
                  onClick={() => setShowQuickQuestions(false)}
                  variant="ghost"
                  size="sm"
                  className="text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300"
                >
                  <ChevronDown className="h-4 w-4" />
                </Button>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {QUICK_QUESTIONS.map((category) => {
                  const Icon = category.icon
                  return (
                    <div key={category.category} className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <Icon className="h-4 w-4 text-slate-600 dark:text-slate-400" />
                        <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                          {category.category}
                        </span>
                      </div>
                      <div className="space-y-1">
                        {category.questions.map((question, idx) => (
                          <button
                            key={idx}
                            onClick={() => {
                              sendMessage(question)
                              setShowQuickQuestions(false)
                            }}
                            className="w-full text-left px-3 py-2 text-sm text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-white bg-slate-50 dark:bg-slate-800/50 hover:bg-slate-100 dark:hover:bg-slate-800 rounded-lg transition-colors"
                          >
                            {question}
                          </button>
                        ))}
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="px-6 py-4 border-t border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900">
          <div className="flex items-center space-x-4">
            <div className="flex-1 relative">
              <Textarea
                ref={textareaRef}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –î–æ–º–æ–≤—ë–Ω–∫–∞ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –¥–∏–∑–∞–π–Ω–µ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç–µ..."
                className="min-h-[44px] max-h-32 resize-none bg-slate-50 dark:bg-slate-800/50 border-slate-200 dark:border-slate-700 focus:border-purple-500/50 focus:ring-purple-500/50 text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 pr-12"
                disabled={isLoading}
              />
              <div className="absolute right-3 top-3 text-xs text-slate-400">
                Enter
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button
                onClick={() => setShowQuickQuestions(!showQuickQuestions)}
                variant="ghost"
                size="sm"
                className="text-slate-600 dark:text-slate-400 hover:text-purple-500"
                disabled={isLoading}
                title="–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
              >
                {showQuickQuestions ? (
                  <ChevronDown className="h-4 w-4" />
                ) : (
                  <ChevronUp className="h-4 w-4" />
                )}
              </Button>
              <Button
                onClick={clearChat}
                variant="ghost"
                size="sm"
                className="text-slate-600 dark:text-slate-400 hover:text-red-500"
                disabled={isLoading}
                title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
              >
                <X className="h-4 w-4" />
              </Button>
              <Button
                onClick={() => sendMessage()}
                disabled={!inputMessage.trim() || isLoading}
                className="bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white disabled:opacity-50"
                title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <Send className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 